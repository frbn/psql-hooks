digraph hooks {
    //rankdir=TR
    node [shape=box];
    nodesep=0.5;
    ExecutorCheckPerms_hook     [shape=ellipse];
    create_upper_paths_hook     [shape=ellipse];
    check_passsword_hook        [shape=ellipse];
    ClientAuthentification_hook [shape=ellipse];
    explain_get_index_name_hook [shape=ellipse];
    emit_log_hook               [shape=ellipse][label="emit_log_hook\n(custom logging process)"];
    ExplainOneQuery_hook        [shape=ellipse];
        
        
	subgraph cluster_0 {label="fnmgr" ;
    	fmgr_hook1                   [shape=ellipse][label="fmgr_hook \n(security policy before)"];
    	fmgr_hook2                   [shape=ellipse][label="fmgr_hook \n(security policy after)"];
    	func_beg                    [shape=ellipse][label="func_beg \n(after var init)"];
    	func_end                    [shape=ellipse][label="func_end \n(CallBack)"];
    	func_setup                  [shape=ellipse][label="func_setup \n(before var init)"];
    	"Execution of a function" ;
    	"Statement of a function" ;
    	needs_fmgr_hook             [shape=ellipse];
    	stmt_beg                    [shape=ellipse];
    	stmt_end                    [shape=ellipse];

    	"Execution of a function" -> needs_fmgr_hook -> fmgr_hook1;
    	fmgr_hook1 -> func_setup  -> func_beg;
    	fmgr_hook2 -> func_end;
    	stmt_beg -> "Statement of a function" -> stmt_end;
    	func_beg -> stmt_beg;
    	stmt_end -> fmgr_hook2;
    }
 
 	subgraph cluster_1 { label="Object access";
    	object_access_hook          [shape=ellipse];

    	"OAT_POST_CREATE" -> object_access_hook;
    	"OAT_POST_ALTER" -> object_access_hook;
    	object_access_hook -> "OAT_DROP";
    	object_access_hook -> "OAT_NAMESPACE_SEARCH";
    	object_access_hook -> "OAT_FUNCTION_EXECUTE";
    }

          
	subgraph cluster_2 {
	label="STARTUP";
    	shmem_startup_hook          [shape=ellipse];

    	"POSTMASTER START" -> shmem_startup_hook ;
    	"BACKEND START" -> shmem_startup_hook ;
    	shmem_startup_hook -> "on_shmem_exit CallBack";
    }

    "Access to a relation" ->  ExecutorCheckPerms_hook;
        
	subgraph cluster_3 {
    label="Query Plan Execution";
    ExecutorStart_hook          [shape=ellipse];
    ExecutorRun_hook            [shape=ellipse];
    ExecutorEnd_hook            [shape=ellipse];
    ExecutorFinish_hook [shape=ellipse][label="ExecutorFinish_hook\n(After last ExecutorRun call)"];
		"Beginning" 
        -> ExecutorStart_hook 
        -> ExecutorStart 
		-> ExecutorRun_hook 
        -> ExecutorFinish_hook 
		-> ExecutorEnd_hook 
    	-> "end of query plan";
	}
        
	subgraph cluster_4 {
	label="ROLE"

		subgraph cluster_5 {
		label="Alteration";
    		{ CREATE_ROLE, ALTER_ROLE } -> check_passsword_hook ;
    	}

		subgraph cluster_6 {
		label="Authentification";
    		AFTER_USER_AUTHENTIFICATION -> ClientAuthentification_hook ;
		}
	}


        
    get_attavgwidth_hook        [shape=ellipse][label="get_attavgwidth_hook \n(replace standard algorythm)"];
        
    get_index_stats_hook        [shape=ellipse];
        
    get_relation_info_hook      [shape=ellipse];
    "get_relation_info()" -> get_relation_info_hook;
        
    get_relation_stats_hook     [shape=ellipse];
        
    join_search_hook            [shape=ellipse];
    "Optimizer chooses order of join relations" -> join_search_hook;
        
        
    planner_hook                [shape=ellipse];
    planner_hook -> standard_planner-> Query_Optimizer;
        
    post_parse_analyze_hook     [shape=ellipse];
    parse_analyze -> "transformTopLevelStmt()" -> post_parse_analyze_hook;
        
    ProcessUtility_hook         [shape=ellipse];
    ProcessUtility_hook -> "standard_ProcessUtility()";
        
    row_security_policy_hook_permissive     [shape=ellipse];
    row_security_policy_hook_restrictive    [shape=ellipse];
    "ACCESS TO AN OBJECT" -> row_security_policy_hook_permissive -> row_security_policy_hook_restrictive;
        
    set_join_pathlist_hook      [shape=ellipse];
    "joinrel (best paths)" -> set_join_pathlist_hook;
        
    set_rel_pathlist_hook       [shape=ellipse];
    "End of building acces paths for a relation" -> set_rel_pathlist_hook;
    "postprocess of the path of set operations" 
        -> create_upper_paths_hook 
        -> contribute_path_in_relation ;
    
    "something to log" 
        -> emit_log_hook 
        -> "Standard log process"  ;
}
